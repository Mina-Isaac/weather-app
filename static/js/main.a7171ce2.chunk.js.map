{"version":3,"sources":["constants.tsx","Store/actions.tsx","Components/Switch/Switch.tsx","utilities.tsx","Components/Charts/Chart.tsx","Components/Loader/keyframes.tsx","Components/Loader/Loader.tsx","Components/Card/Card.tsx","Components/Carousel/Carousel.tsx","Components/App/ShortCard.tsx","Components/App/App.tsx","serviceWorker.ts","Store/epic.tsx","Store/services.tsx","Store/reducer.tsx","Store/store.tsx","index.tsx","Components/App/background.svg"],"names":["Scales","ICON_URL","ActionTypes","getData","createAction","setData","resolve","data","dataError","error","setTempScale","scale","setSelectedDay","index","Switcher","styled","fieldset","SwitcherInput","input","SwitcherLbl","label","SwitcherBG","span","props","tempSys","Fahrenheit","SwitcherLbls","Switch","useSelector","state","tempScale","dispatch","useDispatch","name","id","type","onChange","Celsius","htmlFor","aria-hidden","data-on","data-off","convertTemp","value","cTemp","toFixed","Stretched","div","Chart","labels","day","map","item","Date","dt","offset","toLocaleTimeString","datasets","backgroundColor","borderColor","borderWidth","hoverBackgroundColor","hoverBorderColor","main","temp","width","height","options","legend","display","plugins","datalabels","color","anchor","align","tooltips","enabled","maintainAspectRatio","scales","yAxes","ticks","beginAtZero","scaleLabel","labelString","xAxes","dropkeyFrame","keyframes","rotatekeyFrame","Preloader","Text","Rain","Drop","Sun","svg","SunPath","path","Cloud","CloudPath","Loader","style","opacity","xmlns","x","y","viewBox","enableBackground","xmlSpace","fill","d","ImgMediaCard","date","selected","dayData","avTempKelvin","summedTemp","forEach","length","calculateAvTemp","avTemp","classes","makeStyles","card","maxWidth","border","margin","useStyles","dayName","getDay","cardDate","Intl","DateTimeFormat","year","month","format","Card","className","CardActionArea","CardContent","Box","fontWeight","letterSpacing","fontSize","Container","Carousel","cardData","selcectedDay","selectedDay","cards","i","key","onClick","settings","dots","infinite","speed","slidesToShow","slidesToScroll","initialSlide","responsive","breakpoint","beforeChange","setTimeout","undefined","description","icon","marginBottom","alignItems","justifyContent","maxHeight","src","alt","background","Wraper","now","getTimezoneOffset","App","useEffect","closestSegmentToNow","groupedData","groupedSegments","loading","fetching","find","nowInSeconds","Math","abs","currentWeather","weather","Boolean","window","location","hostname","match","propertyFilter","fetchWeatherSegmentsFlow","action$","state$","service","pipe","filter","isActionOf","actions","withLatestFrom","switchMap","from","fetchDataFromAPI","list","holder","prop","includes","len","lastInd","remainder","subArr","elem","push","slice","groupSegmentsByDate","catchError","of","appServices","url","API_URL","fetch","then","res","json","initialState","reducer","action","getType","payload","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","epicMiddleware","createEpicMiddleware","dependencies","middleware","store","applyMiddleware","createStore","createStoreWithMiddleware","run","configStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.a7171ce2.chunk.js","sourcesContent":["export const API_URL = \"https://api.openweathermap.org/data/2.5/forecast?q=\";\r\nexport const APPID = \"75f972b80e26f14fe6c920aa6a85ad57\";\r\nexport const city = \"Munich,de\";\r\nexport const segmentCount = \"40\";\r\nexport const ICON_URL = \"https://openweathermap.org/img/wn/\";\r\n\r\nexport const ActionTypes = {\r\n  SET_TEMP_SCALE: \"SET_TEMP_SCALE\",\r\n  SET_SELECTED_DAY: \"SET_SELECTED_DAY\",\r\n  FETCH_DATA: \"FETCH_DATA\",\r\n  FETCH_DATA_SUCCESS: \"FETCH_DATA_SUCCESS\",\r\n  FETCH_DATA_ERROR: \"FETCH_DATA_ERROR\"\r\n};\r\n\r\nexport enum Scales {\r\n  Fahrenheit = \"F\",\r\n  Celsius = \"C\"\r\n}\r\n\r\ntype main = {\r\n  temp: number;\r\n  temp_min: number;\r\n  temp_max: number;\r\n  pressure: number;\r\n  sea_level: number;\r\n  grnd_level: number;\r\n  humidity: number;\r\n  temp_kf: number;\r\n};\r\n\r\ntype weather = {\r\n  id: number;\r\n  main: string;\r\n  description: string;\r\n  icon: string;\r\n};\r\n\r\nexport type weatherSegment = {\r\n  dt: number;\r\n  main: main;\r\n  weather: weather[];\r\n  dt_txt: string;\r\n};\r\n","import { createAction } from \"typesafe-actions\";\r\nimport { ActionTypes, Scales, weatherSegment } from \"../constants\";\r\n\r\nconst getData = createAction(ActionTypes.FETCH_DATA);\r\n\r\nconst setData = createAction(\r\n  ActionTypes.FETCH_DATA_SUCCESS,\r\n  resolve => (data: weatherSegment[][]) => resolve(data)\r\n);\r\n\r\nconst dataError = createAction(\r\n  ActionTypes.FETCH_DATA_ERROR,\r\n  resolve => (error: Error) => resolve(error)\r\n);\r\n\r\nconst setTempScale = createAction(\r\n  ActionTypes.SET_TEMP_SCALE,\r\n  resolve => (scale: Scales) => resolve(scale)\r\n);\r\n\r\nconst setSelectedDay = createAction(\r\n  ActionTypes.SET_SELECTED_DAY,\r\n  resolve => (index: number | undefined) => resolve(index)\r\n);\r\n\r\nexport { getData, setData, dataError, setTempScale, setSelectedDay };\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { appState } from \"../../Store/reducer\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { setTempScale } from \"../../Store/actions\";\r\nimport { Scales } from \"../../constants\";\r\n\r\nconst Switcher = styled.fieldset`\r\n  position: relative;\r\n  top: 1em;\r\n  width: 120px;\r\n  height: 40px;\r\n  margin-bottom: 1em;\r\n  background: rgba(255, 255, 255, 0.6);\r\n  border-radius: 5px;\r\n  border: 4px solid rgba(255, 255, 255, 0.4);\r\n  padding: 0;\r\n  box-sizing: content-box;\r\n  &:hover {\r\n    border-color: rgba(255, 255, 255, 0.6);\r\n  }\r\n`;\r\nconst SwitcherInput = styled.input`\r\n  position: absolute;\r\n  opacity: 0;\r\n  z-index: -10;\r\n`;\r\nconst SwitcherLbl = styled.label`\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  z-index: 2;\r\n  width: 100%;\r\n  height: 40px;\r\n  opacity: 0;\r\n  cursor: pointer;\r\n`;\r\n\r\ninterface SwitcherBGI {\r\n  tempSys: Scales;\r\n}\r\nconst SwitcherBG = styled.span<SwitcherBGI>`\r\n  position: absolute;\r\n  z-index: 0;\r\n  width: 50%;\r\n  height: inherit;\r\n  left: ${(props) => (props.tempSys === Scales.Fahrenheit ? \"50%\" : \"0\")};\r\n  background: #3498db;\r\n  transition: all 0.3s;\r\n  border-radius: 5px;\r\n`;\r\nconst SwitcherLbls = styled.span`\r\n  position: absolute;\r\n  z-index: 1;\r\n  width: inherit;\r\n  height: inherit;\r\n  &:before,\r\n  &:after {\r\n    height: 40px;\r\n    width: 50%;\r\n    line-height: 40px;\r\n    transition: all 0.3s;\r\n    -webkit-transition: all 0.3s;\r\n    text-align: center;\r\n  }\r\n  &:before {\r\n    content: attr(data-on);\r\n    left: 0;\r\n    position: absolute;\r\n    color: darken(#fff, 30%);\r\n  }\r\n  &:after {\r\n    content: attr(data-off);\r\n    position: absolute;\r\n    right: 0;\r\n    color: #fff;\r\n  }\r\n`;\r\n\r\nconst Switch: React.FC = () => {\r\n  const tempSys = useSelector((state: appState) => state.tempScale);\r\n  const dispatch = useDispatch();\r\n  const handleInputChange = () =>\r\n    dispatch(\r\n      setTempScale(\r\n        tempSys === Scales.Celsius ? Scales.Fahrenheit : Scales.Celsius\r\n      )\r\n    );\r\n  return (\r\n    <Switcher>\r\n      <SwitcherInput\r\n        name=\"celsius-fehrenhite-converter\"\r\n        id=\"switch\"\r\n        type=\"checkbox\"\r\n        onChange={handleInputChange}\r\n      />\r\n      <SwitcherLbl htmlFor=\"switch\"></SwitcherLbl>\r\n      <SwitcherBG aria-hidden=\"true\" tempSys={tempSys}></SwitcherBG>\r\n      <SwitcherLbls\r\n        data-on={\" °\" + Scales.Celsius}\r\n        data-off={\" °\" + Scales.Fahrenheit}\r\n        aria-hidden=\"true\"\r\n      ></SwitcherLbls>\r\n    </Switcher>\r\n  );\r\n};\r\n\r\nexport default Switch;\r\n","import { weatherSegment } from \"./constants\";\r\nimport { offset } from \"./Components/App/App\";\r\n\r\n//This function finds the weather segment that is closest to the current moment,\r\n//it is used to display the current weather decription and icon in the app\r\nfunction findClosestSegmentToNow(\r\n  dayData: weatherSegment[]\r\n): weatherSegment | undefined {\r\n  return dayData.find((item: weatherSegment): boolean => {\r\n    const nowInSeconds = Date.now() / 1000;\r\n    return (\r\n      Math.abs(item.dt + offset / 1000 - nowInSeconds) <= (3 * 60 * 60) / 2\r\n    );\r\n  });\r\n}\r\n\r\n//This functions calculates the average temperature of an array of weather segments\r\nfunction calculateAvTemp(dayData: weatherSegment[]) {\r\n  let summedTemp: number = 0;\r\n  dayData.forEach((item: weatherSegment) => (summedTemp += item.main.temp));\r\n  return summedTemp / dayData.length;\r\n}\r\n\r\n//This function is used to group weather segments by date in order to facilitate further\r\n//processing of data. This function assumes that weather segments are already sorted by time.\r\nfunction groupSegmentsByDate(data: weatherSegment[]): weatherSegment[][] {\r\n  const groupedData: weatherSegment[][] = [];\r\n  let len: number = 0;\r\n  let lastInd: number = -1;\r\n  let remainder = data;\r\n  data.forEach((item, i) => {\r\n    if (i < lastInd + len) return;\r\n    const subArr = remainder.filter(\r\n      elem =>\r\n        new Date(elem.dt * 1000).getDay() === new Date(item.dt * 1000).getDay()\r\n    );\r\n    len = subArr.length;\r\n    lastInd = i;\r\n    groupedData.push(subArr);\r\n    remainder = remainder.slice(len);\r\n  });\r\n  return groupedData;\r\n}\r\n\r\n//This function converts temoerature to F or C scale\r\nfunction convertTemp(value: number, tempScale: string): string {\r\n  const cTemp = value - 273.15;\r\n  if (tempScale === \"C\") return cTemp.toFixed(1);\r\n  return (1.8 * cTemp + 32).toFixed(1);\r\n}\r\n\r\nexport {\r\n  findClosestSegmentToNow,\r\n  calculateAvTemp,\r\n  groupSegmentsByDate,\r\n  convertTemp\r\n};\r\n","import React from \"react\";\r\nimport { Bar } from \"react-chartjs-2\";\r\nimport { weatherSegment } from \"../../constants\";\r\nimport styled from \"styled-components\";\r\nimport { convertTemp } from \"../../utilities\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { appState } from \"../../Store/reducer\";\r\nimport { offset } from \"../App/App\";\r\nimport \"chartjs-plugin-datalabels\";\r\n\r\nexport type DayData = {\r\n  day: weatherSegment[];\r\n};\r\n\r\nconst Stretched = styled.div`\r\n  align-self: stretch;\r\n  padding: 0 2%;\r\n  max-height: 50vh;\r\n`;\r\n\r\nconst Chart = (props: DayData) => {\r\n  //Getting an array of labels representing weather segments present in the received data\r\n  //The resulting labels are a bit lengthy, a time formatter could be used to shorten them\r\n\r\n  const labels = props.day.map(\r\n    item => `${new Date(item.dt * 1000 + offset).toLocaleTimeString()}`\r\n  );\r\n  const tempScale = useSelector((state: appState) => {\r\n    return state.tempScale;\r\n  });\r\n\r\n  const label = `Temperature in °${tempScale}`;\r\n  const chartData = props.day.map(item =>\r\n    convertTemp(item.main.temp, tempScale)\r\n  );\r\n\r\n  const data = {\r\n    labels,\r\n    datasets: [\r\n      {\r\n        label: \"Temperature across the day\",\r\n        backgroundColor: \"rgba(255,99,132,0.5)\",\r\n        borderColor: \"rgba(255,99,132,1)\",\r\n        borderWidth: 1,\r\n        hoverBackgroundColor: \"rgba(255,99,132,0.4)\",\r\n        hoverBorderColor: \"rgba(255,99,132,1)\",\r\n        data: chartData\r\n      }\r\n    ]\r\n  };\r\n  return (\r\n    <Stretched>\r\n      <Bar\r\n        data={data}\r\n        width={120}\r\n        height={70}\r\n        options={{\r\n          legend: {\r\n            display: false\r\n          },\r\n          plugins: {\r\n            datalabels: {\r\n              display: true,\r\n              color: \"white\",\r\n              anchor: \"end\",\r\n              align: \"start\"\r\n            }\r\n          },\r\n          tooltips: {\r\n            enabled: false\r\n          },\r\n          maintainAspectRatio: true,\r\n          scales: {\r\n            yAxes: [\r\n              {\r\n                ticks: {\r\n                  beginAtZero: true\r\n                },\r\n                scaleLabel: {\r\n                  display: true,\r\n                  labelString: label\r\n                }\r\n              }\r\n            ],\r\n            xAxes: [\r\n              {\r\n                scaleLabel: {\r\n                  display: true\r\n                  //labelString: 'Time'\r\n                }\r\n              }\r\n            ]\r\n          }\r\n        }}\r\n      />\r\n    </Stretched>\r\n  );\r\n};\r\n\r\nexport default Chart;\r\n","import { keyframes } from \"styled-components\";\r\n\r\nexport const dropkeyFrame = keyframes`\r\n  50% {\r\n    height: 45px;\r\n    opacity: 0;\r\n  }\r\n  51% {\r\n    opacity: 0;\r\n  }\r\n  100% {\r\n    height: 1px;\r\n    opacity: 0;\r\n}`;\r\nexport const rotatekeyFrame = keyframes`\r\n  0% {\r\n    transform: rotateZ(0deg);\r\n  }\r\n  100% {\r\n    transform: rotateZ(360deg);\r\n  }`;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { dropkeyFrame, rotatekeyFrame } from \"./keyframes\";\r\n\r\nconst Preloader = styled.div`\r\n  position: absolute;\r\n  margin-left: -55px;\r\n  margin-top: -100px;\r\n  height: 110px;\r\n  width: 110px;\r\n  left: 50%;\r\n  top: 50%;\r\n`;\r\n\r\nconst Text = styled.div`\r\n  font-family: Helvetica, \"Helvetica Neue\", sans-serif;\r\n  letter-spacing: 1px;\r\n  text-align: center;\r\n  margin-left: -43px;\r\n  font-weight: bold;\r\n  margin-top: 20px;\r\n  font-size: 11px;\r\n  color: #fff;\r\n  width: 200px;\r\n`;\r\nconst Rain = styled.div`\r\n  position: absolute;\r\n  width: 70px;\r\n  height: 70px;\r\n  margin-top: -32px;\r\n  margin-left: 19px;\r\n`;\r\nconst Drop = styled.span`\r\n  opacity: 1;\r\n  background: #fff;\r\n  display: block;\r\n  float: left;\r\n  width: 3px;\r\n  height: 10px;\r\n  margin-left: 4px;\r\n  border-radius: 0px 0px 6px 6px;\r\n  animation: ${dropkeyFrame} 350ms infinite;\r\n\r\n  &:nth-child(1) {\r\n    animation-delay: -130ms;\r\n  }\r\n  &:nth-child(2) {\r\n    animation-delay: -240ms;\r\n  }\r\n  &:nth-child(3) {\r\n    animation-delay: -390ms;\r\n  }\r\n  &:nth-child(4) {\r\n    animation-delay: -525ms;\r\n  }\r\n  &:nth-child(5) {\r\n    animation-delay: -640ms;\r\n  }\r\n  &:nth-child(6) {\r\n    animation-delay: -790ms;\r\n  }\r\n  &:nth-child(7) {\r\n    animation-delay: -900ms;\r\n  }\r\n  &:nth-child(8) {\r\n    animation-delay: -1050ms;\r\n  }\r\n  &:nth-child(9) {\r\n    animation-delay: -1130ms;\r\n  }\r\n  &:nth-child(10) {\r\n    animation-delay: -1300ms;\r\n  }\r\n`;\r\nconst Sun = styled.svg`\r\n  opacity: 1;\r\n  margin-left: 10px;\r\n  margin-top: 6px;\r\n  width: 60px;\r\n  height: 60px;\r\n  position: absolute;\r\n  left: 45px;\r\n  top: 15px;\r\n  z-index: 1;\r\n  animation: ${rotatekeyFrame} 16000ms infinite linear;\r\n`;\r\nconst SunPath = styled.path`\r\n  stroke-width: 0.18;\r\n  fill: #fff;\r\n`;\r\nconst Cloud = styled.svg`\r\n  width: 110px;\r\n  height: 110px;\r\n  position: relative;\r\n  z-index: 2;\r\n`;\r\nconst CloudPath = styled.path`\r\n  stroke: #fff;\r\n  stroke-width: 0.25;\r\n  fill: #efefef;\r\n`;\r\nconst Loader: React.FC = () => {\r\n  return (\r\n    <Preloader style={{ opacity: \"1\" }}>\r\n      <Sun\r\n        xmlns=\"http://www.w3.org/2000/svg\"\r\n        x=\"0px\"\r\n        y=\"0px\"\r\n        width=\"10px\"\r\n        height=\"10px\"\r\n        viewBox=\"0 0 10 10\"\r\n        enableBackground=\"new 0 0 10 10\"\r\n        xmlSpace=\"preserve\"\r\n      >\r\n        <g>\r\n          <SunPath\r\n            fill=\"none\"\r\n            d=\"M6.942,3.876c-0.4-0.692-1.146-1.123-1.946-1.123c-0.392,0-0.779,0.104-1.121,0.301c-1.072,0.619-1.44,1.994-0.821,3.067C3.454,6.815,4.2,7.245,5,7.245c0.392,0,0.779-0.104,1.121-0.301C6.64,6.644,7.013,6.159,7.167,5.581C7.321,5,7.243,4.396,6.942,3.876z M6.88,5.505C6.745,6.007,6.423,6.427,5.973,6.688C5.676,6.858,5.34,6.948,5,6.948c-0.695,0-1.343-0.373-1.69-0.975C2.774,5.043,3.093,3.849,4.024,3.312C4.32,3.14,4.656,3.05,4.996,3.05c0.695,0,1.342,0.374,1.69,0.975C6.946,4.476,7.015,5,6.88,5.505z\"\r\n          />\r\n          <SunPath\r\n            fill=\"none\"\r\n            d=\"M8.759,2.828C8.718,2.757,8.626,2.732,8.556,2.774L7.345,3.473c-0.07,0.041-0.094,0.132-0.053,0.202C7.319,3.723,7.368,3.75,7.419,3.75c0.025,0,0.053-0.007,0.074-0.02l1.211-0.699C8.774,2.989,8.8,2.899,8.759,2.828z\"\r\n          />\r\n          <SunPath\r\n            fill=\"none\"\r\n            d=\"M1.238,7.171c0.027,0.047,0.077,0.074,0.128,0.074c0.025,0,0.051-0.008,0.074-0.02l1.211-0.699c0.071-0.041,0.095-0.133,0.054-0.203S2.574,6.228,2.503,6.269l-1.21,0.699C1.221,7.009,1.197,7.101,1.238,7.171z\"\r\n          />\r\n          <SunPath\r\n            fill=\"none\"\r\n            d=\"M6.396,2.726c0.052,0,0.102-0.026,0.13-0.075l0.349-0.605C6.915,1.976,6.89,1.885,6.819,1.844c-0.07-0.042-0.162-0.017-0.202,0.054L6.269,2.503C6.228,2.574,6.251,2.666,6.322,2.706C6.346,2.719,6.371,2.726,6.396,2.726z\"\r\n          />\r\n          <SunPath\r\n            fill=\"none\"\r\n            d=\"M3.472,7.347L3.123,7.952c-0.041,0.07-0.017,0.162,0.054,0.203C3.2,8.169,3.226,8.175,3.25,8.175c0.052,0,0.102-0.027,0.129-0.074l0.349-0.605c0.041-0.07,0.017-0.16-0.054-0.203C3.603,7.251,3.513,7.276,3.472,7.347z\"\r\n          />\r\n          <SunPath\r\n            fill=\"none\"\r\n            d=\"M3.601,2.726c0.025,0,0.051-0.007,0.074-0.02C3.746,2.666,3.77,2.574,3.729,2.503l-0.35-0.604C3.338,1.828,3.248,1.804,3.177,1.844C3.106,1.886,3.082,1.976,3.123,2.047l0.35,0.604C3.5,2.7,3.549,2.726,3.601,2.726z\"\r\n          />\r\n          <SunPath\r\n            fill=\"none\"\r\n            d=\"M6.321,7.292c-0.07,0.043-0.094,0.133-0.054,0.203l0.351,0.605c0.026,0.047,0.076,0.074,0.127,0.074c0.025,0,0.051-0.006,0.074-0.02c0.072-0.041,0.096-0.133,0.055-0.203l-0.35-0.605C6.483,7.276,6.393,7.253,6.321,7.292z\"\r\n          />\r\n          <SunPath\r\n            fill=\"none\"\r\n            d=\"M2.202,5.146c0.082,0,0.149-0.065,0.149-0.147S2.284,4.851,2.202,4.851H1.503c-0.082,0-0.148,0.066-0.148,0.148s0.066,0.147,0.148,0.147H2.202z\"\r\n          />\r\n          <SunPath\r\n            fill=\"none\"\r\n            d=\"M8.493,4.851H7.794c-0.082,0-0.148,0.066-0.148,0.148s0.066,0.147,0.148,0.147l0,0h0.699c0.082,0,0.148-0.065,0.148-0.147S8.575,4.851,8.493,4.851L8.493,4.851z\"\r\n          />\r\n          <SunPath\r\n            fill=\"none\"\r\n            d=\"M5.146,2.203V0.805c0-0.082-0.066-0.148-0.148-0.148c-0.082,0-0.148,0.066-0.148,0.148v1.398c0,0.082,0.066,0.149,0.148,0.149C5.08,2.352,5.146,2.285,5.146,2.203z\"\r\n          />\r\n          <SunPath\r\n            fill=\"none\"\r\n            d=\"M4.85,7.796v1.396c0,0.082,0.066,0.15,0.148,0.15c0.082,0,0.148-0.068,0.148-0.15V7.796c0-0.082-0.066-0.148-0.148-0.148C4.917,7.647,4.85,7.714,4.85,7.796z\"\r\n          />\r\n          <SunPath\r\n            fill=\"none\"\r\n            d=\"M2.651,3.473L1.44,2.774C1.369,2.732,1.279,2.757,1.238,2.828C1.197,2.899,1.221,2.989,1.292,3.031l1.21,0.699c0.023,0.013,0.049,0.02,0.074,0.02c0.051,0,0.101-0.026,0.129-0.075C2.747,3.604,2.722,3.514,2.651,3.473z\"\r\n          />\r\n          <SunPath\r\n            fill=\"none\"\r\n            d=\"M8.704,6.968L7.493,6.269c-0.07-0.041-0.162-0.016-0.201,0.055c-0.041,0.07-0.018,0.162,0.053,0.203l1.211,0.699c0.023,0.012,0.049,0.02,0.074,0.02c0.051,0,0.102-0.027,0.129-0.074C8.8,7.101,8.776,7.009,8.704,6.968z\"\r\n          />\r\n        </g>\r\n      </Sun>\r\n      <Cloud\r\n        id=\"cloud\"\r\n        xmlns=\"http://www.w3.org/2000/svg\"\r\n        x=\"0px\"\r\n        y=\"0px\"\r\n        width=\"10px\"\r\n        height=\"10px\"\r\n        viewBox=\"0 0 10 10\"\r\n        enableBackground=\"new 0 0 10 10\"\r\n        xmlSpace=\"preserve\"\r\n      >\r\n        <CloudPath\r\n          fill=\"none\"\r\n          d=\"M8.528,5.624H8.247c-0.085,0-0.156-0.068-0.156-0.154c0-0.694-0.563-1.257-1.257-1.257c-0.098,0-0.197,0.013-0.3,0.038C6.493,4.259,6.45,4.252,6.415,4.229C6.38,4.208,6.356,4.172,6.348,4.131C6.117,3.032,5.135,2.235,4.01,2.235c-1.252,0-2.297,0.979-2.379,2.23c-0.004,0.056-0.039,0.108-0.093,0.13C1.076,4.793,0.776,5.249,0.776,5.752c0,0.693,0.564,1.257,1.257,1.257h6.495c0.383,0,0.695-0.31,0.695-0.692S8.911,5.624,8.528,5.624z\"\r\n        />\r\n      </Cloud>\r\n      <Rain>\r\n        <Drop></Drop>\r\n        <Drop></Drop>\r\n        <Drop></Drop>\r\n        <Drop></Drop>\r\n        <Drop></Drop>\r\n        <Drop></Drop>\r\n        <Drop></Drop>\r\n        <Drop></Drop>\r\n        <Drop></Drop>\r\n        <Drop></Drop>\r\n      </Rain>\r\n      <Text>LOOKING OUTSIDE FOR YOU... ONE SEC</Text>\r\n    </Preloader>\r\n  );\r\n};\r\n\r\nexport default Loader;\r\n","import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardActionArea from \"@material-ui/core/CardActionArea\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { appState } from \"../../Store/reducer\";\r\nimport { calculateAvTemp, convertTemp } from \"../../utilities\";\r\nimport { weatherSegment } from \"../../constants\";\r\n\r\nexport type cardProps = {\r\n  date: number;\r\n  selected: boolean;\r\n  dayData: weatherSegment[];\r\n};\r\nexport default function ImgMediaCard(props: cardProps) {\r\n  const { date, selected, dayData } = props;\r\n  const tempScale = useSelector((state: appState) => {\r\n    return state.tempScale;\r\n  });\r\n  const avTempKelvin: number = calculateAvTemp(dayData);\r\n  const avTemp = `${convertTemp(avTempKelvin, tempScale)}°${tempScale}`;\r\n  const useStyles = makeStyles({\r\n    card: {\r\n      maxWidth: 320,\r\n      backgroundColor: `${\r\n        selected ? \"rgba(255, 255, 255, 0.7)\" : \"rgba(255, 255, 255, 0.5)\"\r\n      }`,\r\n      border: \"1px solid rgba(255, 255, 255, 0.6)\",\r\n      color: \"#196090\",\r\n      margin: \"1% 1%\"\r\n    }\r\n  });\r\n  const classes = useStyles();\r\n  //Determinning day from date\r\n  const days: string[] = [\r\n    \"Sunday\",\r\n    \"Monday\",\r\n    \"Tuesday\",\r\n    \"Wednesday\",\r\n    \"Thursday\",\r\n    \"Friday\",\r\n    \"Saturday\"\r\n  ];\r\n  const dayName: string = days[new Date(1000 * date).getDay()];\r\n  const cardDate = new Intl.DateTimeFormat(\"en-GB\", {\r\n    year: \"numeric\",\r\n    month: \"numeric\",\r\n    day: \"numeric\"\r\n  }).format(new Date(1000 * date));\r\n\r\n  return (\r\n    <Card className={classes.card}>\r\n      <CardActionArea>\r\n        <CardContent>\r\n          <Box fontWeight=\"fontWeightBold\" letterSpacing={4} fontSize={32}>\r\n            {dayName}\r\n          </Box>\r\n          <Box fontSize={16}>{cardDate}</Box>\r\n          <hr />\r\n          <Box fontWeight=\"fontWeightBold\" fontSize={36}>\r\n            {avTemp}{\" \"}\r\n          </Box>\r\n        </CardContent>\r\n      </CardActionArea>\r\n    </Card>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { weatherSegment } from \"../../constants\";\r\nimport Card from \"../Card/Card\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { appState } from \"../../Store/reducer\";\r\nimport { setSelectedDay } from \"../../Store/actions\";\r\nimport Slider from \"react-slick\";\r\n\r\nconst Container = styled.div`\r\n  max-width: 70%;\r\n`;\r\nexport type CarouselProps = {\r\n  cardData: weatherSegment[][];\r\n};\r\n\r\nconst Carousel = (props: CarouselProps) => {\r\n  const { cardData } = props;\r\n  const dispatch = useDispatch();\r\n  const selcectedDay = useSelector((state: appState) => {\r\n    return state.selectedDay;\r\n  });\r\n\r\n  let cards: Array<JSX.Element> = cardData.map(\r\n    (item: weatherSegment[], i: number) => {\r\n      const selected = i === selcectedDay;\r\n      return (\r\n        <div key={i} onClick={() => dispatch(setSelectedDay(i))}>\r\n          <Card date={item[0].dt} selected={selected} dayData={item} />\r\n        </div>\r\n      );\r\n    }\r\n  );\r\n  const settings = {\r\n    dots: false,\r\n    infinite: false,\r\n    speed: 500,\r\n    slidesToShow: 3,\r\n    slidesToScroll: 3,\r\n    initialSlide: 0,\r\n    responsive: [\r\n      {\r\n        breakpoint: 600,\r\n        settings: {\r\n          slidesToShow: 2,\r\n          slidesToScroll: 1\r\n        }\r\n      },\r\n      {\r\n        breakpoint: 480,\r\n        settings: {\r\n          slidesToShow: 1,\r\n          slidesToScroll: 1\r\n        }\r\n      }\r\n    ],\r\n    beforeChange: () =>\r\n      setTimeout(() => {\r\n        dispatch(setSelectedDay(undefined));\r\n      }, 540)\r\n  };\r\n  return (\r\n    <Container>\r\n      <Slider {...settings}>{cards}</Slider>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Carousel;\r\n","import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport { ICON_URL } from \"../../constants\";\r\n\r\ntype Props = {\r\n  description: string;\r\n  icon: string;\r\n};\r\n\r\nexport default function ImgMediaCard(props: Props) {\r\n  const { description, icon } = props;\r\n\r\n  const useStyles = makeStyles({\r\n    card: {\r\n      maxWidth: '100%',\r\n      backgroundColor: \"rgba(255, 255, 255, 0.5)\",\r\n      border: \"1px solid rgba(255, 255, 255, 0.6)\",\r\n      color: \"#196090\",\r\n      marginBottom: \"1%\"\r\n    }\r\n  });\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Card className={classes.card}>\r\n      <CardContent>\r\n        <Box\r\n          display=\"flex\"\r\n          alignItems=\"center\"\r\n          justifyContent=\"center\"\r\n          maxHeight={3}\r\n          fontWeight=\"fontWeightBold\"\r\n          //letterSpacing={1}\r\n          fontSize={20}\r\n        >\r\n          {`Weather now: ${description}`}\r\n          <img src={`${ICON_URL + icon}.png`} alt=\"weather icon\" />\r\n        </Box>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n","import React, { useEffect } from \"react\";\r\nimport background from \"./background.svg\";\r\nimport styled from \"styled-components\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { getData } from \"../../Store/actions\";\r\nimport { appState } from \"../../Store/reducer\";\r\nimport { weatherSegment } from \"../../constants\";\r\nimport Switch from \"../Switch/Switch\";\r\nimport Chart from \"../Charts/Chart\";\r\nimport { findClosestSegmentToNow } from \"../../utilities\";\r\nimport Loader from \"../Loader/Loader\";\r\nimport Carousel from \"../Carousel/Carousel\";\r\nimport ShortCard from \"./ShortCard\";\r\n\r\nconst Container = styled.div`\r\n  min-height: 100vh;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-contents: center;\r\n  align-items: center;\r\n  background-image: ${\"url(\" + background + \")\"};\r\n  background-repeat: no-repeat;\r\n  background-size: cover;\r\n  background-attachment: fixed;\r\n`;\r\n\r\nconst Wraper = styled.div`\r\n  min-width: 85%;\r\n  margin-top: 1%;\r\n  overflow: hidden;\r\n  border: 1px dashed gray;\r\n  padding: 3px;\r\n`;\r\n\r\nexport const offset = 1000 * 60 * new Date(Date.now()).getTimezoneOffset();\r\n\r\nconst App: React.FC = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    dispatch(getData());\r\n  }, [dispatch]);\r\n\r\n  const groupedData: weatherSegment[][] = useSelector((state: appState) => {\r\n    return state.groupedSegments;\r\n  });\r\n\r\n  const loading = useSelector((state: appState) => {\r\n    return state.fetching;\r\n  });\r\n\r\n  const selectedDay = useSelector((state: appState) => {\r\n    return state.selectedDay;\r\n  });\r\n\r\n  //Finding the wether segment that represents the present moment more closely (within 1.5 hours)\r\n  let closestSegmentToNow: weatherSegment | undefined;\r\n  if (groupedData.length)\r\n    closestSegmentToNow = findClosestSegmentToNow(groupedData[0]);\r\n\r\n  //Building an element to diplay the current weather as represented by closestSegmentToNow\r\n  const currentWeather = closestSegmentToNow ? (\r\n    <ShortCard\r\n      description={closestSegmentToNow.weather[0].description}\r\n      icon={closestSegmentToNow.weather[0].icon}\r\n    />\r\n  ) : null;\r\n\r\n  return (\r\n    <Container className=\"App\">\r\n      {(loading && <Loader />) || (\r\n        <>\r\n          {(groupedData.length > 0 && (\r\n            <>\r\n              <Switch />\r\n              <br />\r\n              {currentWeather}\r\n              <Carousel cardData={groupedData} />\r\n              {(selectedDay !== undefined && (\r\n                <Wraper>\r\n                  <Chart day={groupedData[selectedDay]} />\r\n                </Wraper>\r\n              )) ||\r\n                null}\r\n            </>\r\n          )) || (\r\n            <div>\r\n              <h1>Error</h1> <h4>Could not retrieve data from server</h4>\r\n            </div>\r\n          )}\r\n        </>\r\n      )}\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import { of, from } from \"rxjs\";\r\nimport { Epic } from \"redux-observable\";\r\nimport * as actions from \"./actions\";\r\nimport {\r\n  catchError,\r\n  map,\r\n  filter,\r\n  switchMap,\r\n  withLatestFrom\r\n} from \"rxjs/operators\";\r\nimport { ActionType, isActionOf } from \"typesafe-actions\";\r\nimport { appState } from \"./reducer\";\r\nimport { groupSegmentsByDate } from \"../utilities\";\r\n\r\ntype Action = ActionType<typeof actions>;\r\nconst propertyFilter = [\"dt\", \"main\", \"weather\", \"dt_txt\"]; //This array will be used to filter returned data\r\n\r\nexport const fetchWeatherSegmentsFlow: Epic<Action, Action, appState, any> = (\r\n  action$,\r\n  state$,\r\n  { service }\r\n) =>\r\n  action$.pipe(\r\n    filter(isActionOf(actions.getData)),\r\n    withLatestFrom(state$),\r\n    switchMap(() =>\r\n      from(service.fetchDataFromAPI()).pipe(\r\n        //Selecting only needed set of properties from returned weather segments\r\n        map((data: any) => {\r\n          const filtered = data.list.map((item: any) => {\r\n            const holder: any = {};\r\n            for (let prop in item) {\r\n              if (propertyFilter.includes(prop)) holder[prop] = item[prop];\r\n            }\r\n            return holder;\r\n          });\r\n          return filtered;\r\n        }),\r\n        //Grouping weather segments by date in order to facilitate further data processing\r\n        map(data => groupSegmentsByDate(data)),\r\n        map(actions.setData),\r\n        catchError(error => of(actions.dataError(error)))\r\n      )\r\n    )\r\n  );\r\n","import { API_URL, APPID, city, segmentCount } from \"../constants\";\r\n\r\nexport class appServices {\r\n  static fetchDataFromAPI() {\r\n    const url = `${API_URL + city}&APPID=${APPID}&cnt=${segmentCount}`;\r\n    return fetch(url).then(res => res.json());\r\n  }\r\n}\r\n","import { ActionType, getType } from \"typesafe-actions\";\r\nimport * as actions from \"./actions\";\r\nimport { weatherSegment, Scales } from \"../constants\";\r\n\r\nexport type appState = {\r\n  groupedSegments: weatherSegment[][];\r\n  fetching: boolean;\r\n  tempScale: Scales;\r\n  selectedDay: number | undefined;\r\n};\r\n\r\nexport type Action = ActionType<typeof actions>;\r\n\r\nexport const initialState: appState = {\r\n  groupedSegments: [],\r\n  fetching: true,\r\n  tempScale: Scales.Fahrenheit,\r\n  selectedDay: undefined\r\n};\r\n\r\nconst reducer = (state: appState = initialState, action: any): appState => {\r\n  switch (action.type) {\r\n    case getType(actions.setData):\r\n      return {\r\n        fetching: false,\r\n        groupedSegments: action.payload,\r\n        tempScale: state.tempScale,\r\n        selectedDay: state.selectedDay\r\n      };\r\n\r\n    case getType(actions.dataError):\r\n      return {\r\n        fetching: false,\r\n        groupedSegments: [],\r\n        tempScale: state.tempScale,\r\n        selectedDay: state.selectedDay\r\n      };\r\n\r\n    case getType(actions.setTempScale):\r\n      return { ...state, tempScale: action.payload };\r\n\r\n    case getType(actions.setSelectedDay):\r\n      return { ...state, selectedDay: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n","import { applyMiddleware, compose, createStore, Middleware } from \"redux\";\r\nimport { createEpicMiddleware } from \"redux-observable\";\r\nimport { fetchWeatherSegmentsFlow } from \"./epic\";\r\nimport { ActionType } from \"typesafe-actions\";\r\nimport { appServices } from \"./services\";\r\nimport * as actions from \"./actions\";\r\nimport reducer, { appState } from \"./reducer\";\r\n\r\ntype Action = ActionType<typeof actions>;\r\n// @ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nconst epicMiddleware = createEpicMiddleware<Action, Action, appState>({\r\n  dependencies: { service: appServices }\r\n});\r\nconst middleware: [Middleware] = [epicMiddleware];\r\n\r\nconst configStore = () => {\r\n  const createStoreWithMiddleware = composeEnhancers(applyMiddleware(...middleware))(\r\n    createStore\r\n  );\r\n  const store = createStoreWithMiddleware(reducer);\r\n  epicMiddleware.run(fetchWeatherSegmentsFlow);\r\n\r\n  return {\r\n    store\r\n  };\r\n};\r\nconst { store } = configStore();\r\nexport { store };\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./Components/App/App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport { store } from \"./Store/store\";\r\nimport { Provider } from \"react-redux\";\r\nimport \"slick-carousel/slick/slick.css\";\r\nimport \"slick-carousel/slick/slick-theme.css\";\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/background.6bb8b08b.svg\";"],"sourceRoot":""}